Paper_ID,Attribute_type,EOSC-TF_Codename,EOSC-TF_Name,EOSC-TF_Definition,Characteristics,RS_level,RS_type
46,Source Code Metrics,EOSC-SCMet-01,Size of the software application,The software product's rebuild value is estimated from the number of lines of code. This value is calculated in man-years using the  Programming Languages Table of the Software Productivity Research Software Productivity Research,Maintainability,OSS,
46,Source Code Metrics,EOSC-SCMet-02,\% of redundant code,A line of code is considered redundant if it is part of a code fragment (larger than 6 lines of code) that is repeated literally (modulo  white-space) in at least one other location in the source code,"Maintainability, Modifiability",OSS,
45:46,Source Code Metrics,EOSC-SCMet-03,\# Lines of code,Number of lines for the whole software project or components/modules/classes/functions/methods,Maintainability,"Individual, Team, OSS",
93,Source Code Metrics,EOSC-SCMet-04,\% of assertions,Percentage of lines of source code containing assertions. Assertions are used as a means for demonstrating that the program is behaving as expected and as an indication of how thoroughly the source classes have been tested on a per class level.,Maintainability,OSS,
11:45:46:93,Source Code Metrics,EOSC-SCMet-05,Cyclomatic Complexity,"Cyclomatic complexity (i.e.,  the number of linearly independent paths through a program's source code) of the whole software component or modules/components/classes/functions/methods. Cyclomatic complexity is created by calculating the number of different code paths in the flow of the program. A program that has complex control flow requires more tests to achieve good code coverage and is less maintainable. \footnote{\url{https://docs.microsoft.com/en-us/visualstudio/code-quality/code-metrics-values?view=vs-2022}}",Maintainability,OSS,
93,Source Code Metrics,EOSC-SCMet-06,Cyclomatic Complexity test/source ratio,Ratio between the sum of cyclomatic complexities of all tests and the source code,Maintainability,OSS,
46:128,Source Code Metrics,EOSC-SCMet-07,Number of arguments,Number of arguments or parameters used in functions. Functions with many parameters may be a symptom of bad encapsulation,Maintainability,"Team, OSS",
45:128,Source Code Metrics,EOSC-SCMet-08,Number of function calls,"Measures the interdependencies between unique classes through parameters, local variables, return types, method calls, generic or template instantiations, base classes, interface implementations, fields defined on external types, and attribute decoration. Good software design dictates that types and methods should have high cohesion and low coupling. High coupling indicates a design that is difficult to reuse and maintain because of its many interdependencies on other types. Source: \url{https://docs.microsoft.com/en-us/visualstudio/code-quality/code-metrics-values?view=vs-2022}.",Maintainability,"Team, OSS",
ISO25010:45:85:128:150,Source Code Metrics,EOSC-SCMet-09,Modularity,"Degree to which a system or computer program is composed of discrete components such that a change to
one component has minimal impact on other components. Also number of modules.","Maintainability, Functional suitability","Individual, Team, OSS",
11:45:128,Source Code Metrics,EOSC-SCMet-10,Number of comments,Number of lines corresponding to comments for the whole software or per modules/components / classes / functions / methods,Modifiability,"Individual, Team, OSS",
ISO25010:45,Source Code Metrics,EOSC-SCMet-11,Maintainability Index (MI),"Degree of effectiveness and efficiency with which a product or system can be modified by the intended
maintainers. Also, the Maintainability Index (MI) calculates an index value between 0 and 100 that represents the relative ease of maintaining the code. A high value means better maintainability. Color coded ratings can be used to quickly identify trouble spots in your code. A green rating is between 20 and 100 and indicates that the code has good maintainability. A yellow rating is between 10 and 19 and indicates that the code is moderately maintainable. A red rating is a rating between 0 and 9. Source \url{https://docs.microsoft.com/en-us/visualstudio/code-quality/code-metrics-values?view=vs-2022}: ",Maintainability,OSS,
ISO24765:45,Source Code Metrics,EOSC-SCMet-12,Internal cohesion,Cohesion describes how related the functions within a single module are. Low cohesion implies that a given module performs tasks which are not very related to each other and hence can create problems as the module becomes large. Source \url{https://en.wikipedia.org/wiki/Coupling_(computer_programming)},Maintainability,OSS,
93,Source Code Metrics,EOSC-SCMet-13,Test class to source class ratio,"Control measure to counter the confounding effect of class size. The coefficient is calculated by TLOC+/SLOC*  (TLOC = number of test classes, TLSOC = number of source classes)",Reliability,OSS,
93,Source Code Metrics,EOSC-SCMet-14,Coupling Between Objects (CBO) ratio,"Ratio between the CBO in the tests and the whole source code. The higher the inter-object class coupling, the more rigorous the testing should be",Maintainability,OSS,
93,Source Code Metrics,EOSC-SCMet-15,Depth of inheritance Tree (DIT) ratio,"Ratio between the DIT of the tests and the DIT of the source code. A higher DIT indicates desirable reuse but adds to the
complexity of the code because a change or a failure in a super class propagates down the inheritance tree.",Maintainability,OSS,
93,Source Code Metrics,EOSC-SCMet-16,Weighted Methods per Class (WMC) ratio,Ratio between the WMC of the tests with respect of the WMC of the whole source code. This measure serves to compare the testing effort on a method basis. WMC is an indicator of fault-proneness,Maintainability,OSS,
93,Source Code Metrics,EOSC-SCMet-17,Source lines of code (SLOC) ratio,SLOC* of the whole project with respect to the minimum SLOC* of its components,Maintainability,OSS,
128,Source Code Metrics,EOSC-SCMet-18,Number of include files,Number of imported modules,Maintainability,"Team, OSS",
128,Source Code Metrics,EOSC-SCMet-19,Number of conditions per module,Number of condition per module,Maintainability,"Individual, Team, OSS",
128,Source Code Metrics,EOSC-SCMet-20,Number of loops per module,Number of loops per module,Maintainability,"Individual, Team, OSS",
45,Time and Performance Metrics,EOSC-TMet-01,Effort required for changes,Time and resources dedicated to resolve an issue,"Reliability, Supportability","Team, OSS",
45,Time and Performance Metrics,EOSC-TMet-02,\# Resolved bugs,Number of resolved bugs per period of time,Supportability,"Team, OSS",
45,Time and Performance Metrics,EOSC-TMet-03,\# Open bugs,Number of open bugs/issues per period of time,Supportability,"Team, OSS",
88,Time and Performance Metrics,EOSC-TMet-04,Defect rates,The number of outstanding defects in a product per period of time,Maintainability,OSS,
ISO25010:140,Time and Performance Metrics,EOSC-TMet-05,Integrity,"Resource cost expended to solve problems caused by inconsistencies within the system. This may be measured in terms of staff time employed to fix problems and user time wasted. Also, degree to which a system, product or component prevents unauthorized access to, or modification of,
computer programs or data.","Integrity, Maintainability",OSS,
140:146,Time and Performance Metrics,EOSC-TMet-06,Maintainability,Measured by the resources spent in terms of time and cost in keeping a system up and running over a period of time.,Maintainability,OSS,
ISO25010:140:146,Time and Performance Metrics,EOSC-TMet-07,Adaptability,"Degree to which a product or system can effectively and efficiently be adapted for different or evolving hardware, software or other operational or usage environments.",Reusability. Adaptability,OSS,
152,Time and Performance Metrics,EOSC-TMet-08,\# Registered users,The metric Number of registered users is to be collected.,Operability,OSS,Service
152,Time and Performance Metrics,EOSC-TMet-09,\# Active users,The metric Number of active users over a given period of time may be collected.,Operability,OSS,Service
ISO25010:152,Time and Performance Metrics,EOSC-TMet-10,Amount computing resources,The metric amount of computing resources per user or group of users is collected. An example is CPU x hours. Resource utilization.,"Operability, Performance Efficiency","Team, OSS",
ISO25010:152,Time and Performance Metrics,EOSC-TMet-11,Amount storage resources,The metric amount of storage resources per user or group of users is collected. An example is GByte x hours. Resource utilization and capacity.,"Operability, Performance Efficiency","Team, OSS",
45,Qualitative,EOSC-Qual-01,Complexity of diagrams,Complexity of diagrams (UML) for the whole software or modules/components,Maintainability. Reusability,"Individual, Team, OSS",
45:92,Qualitative,EOSC-Qual-02,Complexity of architecture,Architecture showing modules and interactions,Maintainability. Reusability,"Team, OSS",
45,Qualitative,EOSC-Qual-03,Complexity of a use case,Complexity of use case diagrams (UML),Maintainability. Reusability. Usability,OSS,
85,Qualitative,EOSC-Qual-04,Sustainable community,An active community is behind the software product,Supportability,"Team, OSS",
ISO25010:92,Qualitative,EOSC-Qual-05,User satisfaction,Degree to which a user interface enables pleasing and satisfying interaction for the user,Attractiveness,OSS,
ISO25010:92:140:146,Qualitative,EOSC-Qual-06,Usability,"Measured using user surveys. However, it may also be assessed in terms of calls upon support staff, e.g. number o f requests for help or support staff time expended. Also, degree to which a product or system can be used by specified users to achieve specified goals with
effectiveness, efficiency and satisfaction in a specified context of use",Usability,OSS,
ISO25010:140:146,Qualitative,EOSC-Qual-07,Reliability,"The reliability of systems from the user's point of view is concerned with three things: (1) How often does it go wrong? (2) How long is it unavailable? (3) Is any information lost at recovery? Also, degree to which a system, product or component performs specified functions under specified conditions for a
specified period of time.",Reliability,OSS,
ISO25010:140:146,Qualitative,EOSC-Qual-08,Efficiency,"Critical resources needed by the operator to carry out the critical tasks can be monitored e.g. if staff time is the critical resource, the elapsed time taken is the best measure o f efficiency. On the other hand, if the computer disk storage is critical, then the percentage of disk space required to carry out the task is the best measure available.","Time behavior, Performance","Individual, Team, OSS",
ISO25010:140:146:150:154,Qualitative,EOSC-Qual-09,Portability,"Degree of effectiveness and efficiency with which a system, product or component can be transferred from one hardware, software or other operational or usage environment to another.",Portability,"Team, OSS",
140,Qualitative,EOSC-Qual-10,Timeliness,Assessed in terms of the costs of non-delivery. These will possibly include staff time and lost sales. It may also be assessed in terms of the number of days departure from the date agreed with client.,Supportability,OSS,
140,Qualitative,EOSC-Qual-11,Cost-Benefit efficiency,Measured in simple financial terms. The costs of installing and maintaining the system are weighed against the assessment of business benefits,Maintainability,OSS,
ISO25010:140,Qualitative,EOSC-Qual-12,Ease of transition,Assessed in terms of staff time expended. The effectiveness of transition may be assessed in terms of the quality of the resulting system particularly the area of integrity.,Compatibility,OSS,
ISO25010:146,Qualitative,EOSC-Qual-13,Accessibility,"Degree to which a product or system can be used by people with the widest range of characteristics and
capabilities to achieve a specified goal in a specified context of use.",Technical accessibility,"Team, OSS",
ISO25010:146,Qualitative,EOSC-Qual-14,Accountability,"Degree to which the actions of an entity can be traced uniquely to the entity. Its usage can be measured; critical segments of code can be instrumented with probes to measure timing, whether specified branches are exercised, etc.","Performance, Resource utilization",OSS,
146,Qualitative,EOSC-Qual-15,Accuracy,Code outputs are sufficiently precise to satisfy their intended use,Performance,"Individual, Team, OSS",
146:154,Qualitative,EOSC-Qual-16,Communicativeness,Metric which facilitates the specification of inputs and provides outputs whose form and content are easy to assimilate and useful.,Ease of use,"Individual, Team, OSS",
ISO25010:146,Qualitative,EOSC-Qual-17,Completeness,All software parts are present and each part is fully developed.,"Supportability, Manageability",OSS,
146,Qualitative,EOSC-Qual-18,Conciseness,Redundant information about the software code is not present.,"Supportability, Resource utilization",OSS,
146:154,Qualitative,EOSC-Qual-19,Consistency,"Source code contains uniform notation, terminology and symbology within itself","Maintainability, Interoperability, Compatibility","Individual, Team, OSS",
146,Qualitative,EOSC-Qual-20,Legibility,Software function is easily discerned by reading the code,"Supportability, Maintainability","Individual, Team, OSS",
ISO25010:146,Qualitative,EOSC-Qual-21,Modifiability,Degree to which a product or system can be effectively and efficiently modified without introducing defects ordegrading existing product quality.,Modifiability,"Individual, Team, OSS",
146,Qualitative,EOSC-Qual-22,Robustness,Software can continue to perform despite some violation of the assumptions in its specification,Safety,OSS,
146,Qualitative,EOSC-Qual-23,Self-containedness,Software performs all its explicit and implicit functions within itself .,Supportability,"Individual, Team, OSS",
146,Qualitative,EOSC-Qual-24,Self-descriptiveness,"Software contains enough information for a reader to determine or verify its objectives, assumptions, constraints, inputs, outputs, components, and revision status.","Supportability, Ease of use","Individual, Team, OSS",
146,Qualitative,EOSC-Qual-25,Structuredness,Software possesses a definite pattern of organization of its interdependent parts.,"Modifiability, Reusability",OSS,
146,Qualitative,EOSC-Qual-26,Understandability,Software purpose is clear to the inspector.,Supportability,"Individual, Team, OSS",
150,Qualitative,EOSC-Qual-27,Intellectual Property,"There are multiple statements embedded into the software product describing unrestricted rights and any conditions for use, including commercial and non-commercial use, and the recommended citation. The list of developers is embedded in the source code of the product, in the documentation, and in the expression of the software upon execution. The intellectual property rights statements are expressed in legal language, machine-readable code, and in concise statements in language that can be understood by laypersons, such as a pre-written, recognizable license.","Supportability, Reusability","Individual, Team, OSS",
150,Qualitative,EOSC-Qual-28,Extensibility,"There is evidence that the software project has been extended externally by users outside of the original development group using existing documentation only. There is a clear approach for modifying and extending features across a in multiple scenarios, with specific documentation and features to allow the building of extensions which are used across a range of domains by multiple user groups. There may be a library available of user-generated content for extensions and user generated documentation on extension is also available.",Attractiveness,OSS,
150,Qualitative,EOSC-Qual-29,Standards compliance,"Compliance with open or internationally recognized standards for the software and software development process, is evident and documented, and verified through testing of all components.Ideally independent verification is documented through regular testing and certification from an independent group.",Functional suitability,"Team, OSS",
150,Qualitative,EOSC-Qual-30,Internationalisation and localisation,Demonstrable usability: Software has been tested with multiple pseudo or genuine translations.,Usability,OSS,
151:154,DevOps-SW release and management,EOSC-SWRelMan-01,"Open source ","Following the open-source model, the source code being produced is open and publicly available to promote the adoption and augment the visibility of the software developments.","Supportability, Maintainability, Availability","Individual, Team, OSS",
151,DevOps-SW release and management,EOSC-SWRelMan-02,Version Control System (VCS),Source code uses a Version Control System (VCS). All software components delivered by the same project agree on a common VCS.,"Supportability, Maintainability","Individual, Team, OSS",
151,DevOps-SW release and management,EOSC-SWRelMan-03,Source code hosting,Source code produced within the scope of a broader development project resides in a common organization of a version control repository hosting service.,"Supportability, Maintainability","Team, OSS",
151,DevOps-SW release and management,EOSC-SWRelMan-04,Working state version,"The main branch in the source code repository maintains a working state version of the software component. Main branch is protected to disallow force pushing, thus preventing untested and un-reviewed source code from entering the production-ready version. New features are merged in the main branch whenever the agreed upon SQA criteria is fulfilled.",Maintainability,"Team, OSS",
151,DevOps-SW release and management,EOSC-SWRelMan-05,Changes branches,"New changes in the source code are placed in individual branches. Branches follow a common nomenclature, usually by prefixing, to differentiate change types (e.g. feature, release, fix).",Maintainability,"Team, OSS",
151:154,DevOps-SW release and management,EOSC-SWRelMan-06,Good patching practice,"Secondary long-term branch that contains the changes for the next software release exists. Next release changes come from the individual branches. Once ready for release, changes in the secondary long-term branch are merged into the main branch and versioned. At that point in time, main and secondary branches are aligned. This step marks a production release.",Maintainability,OSS,
11:150:151:152,DevOps-SW release and management,EOSC-SWRelMan-07,Support,"Existance of an issue tracking system or helpdesk, facilitates structured software development. Leveraging issues to track down both new enhancements and defects (bugs, documentation typos). Applies as well to services to report operational and users issues.","Maintainability, Operability","Team, OSS",
11:85:92:151,DevOps-SW release and management,EOSC-SWRelMan-08,Code review,"Code reviews are done in the agreed peer review tool within the project, with the following  functionality: (a) Allows general and specific comments on the line or lines that need to be reviewed. (b) Shows the results of the required change-based test executions. (c) Allows to prevent merges of the candidate change whenever not all the required tests are successful. Exceptions to this rule cover the third-party or upstream contributions which MAY use the existing mechanisms or tools for code review provided by the target software project. This exception is only be allowed whenever the external revision lifecycle does not interfere with the project deadlines.",Maintainability,"Team, OSS",
151:154,DevOps-SW release and management,EOSC-SWRelMan-09,"Semantic Versioning ",Semantic Versioning specification is followed for tagging the production releases.,Maintainability,"Individual, Team, OSS",
151:154,DevOps-SW release and management,EOSC-SWRelMan-10,Open-source license,"As open-source software, source code adheres to an open-source license to be freely used, modified and distributed by others. Non-licensed software is exclusive copyright by default.","Supportability, Maintainability","Individual, Team, OSS",
151,DevOps-SW release and management,EOSC-SWRelMan-11,Metadata,"A metadata file (such as Codemeta or Citation File Format) exists along side the code, under its VCS. The metadata file is updated when needed, as is the case of a new version.","Supportability, Maintainability, Availability","Team, OSS",
150:151:154,DevOps-SW release and management,EOSC-SWRelMan-12,Packaging,Production-ready code is  built as an artifact that can be installed on a system.,Installability,"Team, OSS",
151,DevOps-SW release and management,EOSC-SWRelMan-13,Register/publish artifact,The built artifact is uploaded and registered into a public repository of such artifacts.,Installability,"Team, OSS",
151,DevOps-SW release and management,EOSC-SWRelMan-14,Notification upon registration,"Upon success of the package delivery process, a notification is sent to pre-defined parties such as the main developer or team.",Installability,OSS,
151,DevOps-SW release and management,EOSC-SWRelMan-15,Code deployment,Production-ready code is deployed as a workable system with the minimal user or system administrator interaction leveraging software configuration management (SCM) tools.,Installability,OSS,
151,DevOps-SW release and management,EOSC-SWRelMan-16,Software Configuration Management (SCM) as code,"A software configuration management (SCM) module is treated as code. Version controlled, it resides in a different repository than the source code to facilitate the distribution.",Installability,OSS,
151,DevOps-SW release and management,EOSC-SWRelMan-17,SCM tool,"All software components delivered by the same project agree on a common SCM tool. However, software products are not restricted to provide a unique solution for the automated deployment.",Installability,OSS,
151,DevOps-SW release and management,EOSC-SWRelMan-18,SCM code changes,Any change affecting the applications deployment or operation is subsequently reflected in the relevant SCM modules.,Installability,OSS,
151,DevOps-SW release and management,EOSC-SWRelMan-19,SCM official repositories,"Official repositories provided by the manufacturer are used to host the SCM modules, thus augmenting the visibility and promote external collaboration.",Installability,OSS,
ISO25010:152,DevOps-SW release and management,EOSC-SWRelMan-20,Installability,"Degree of effectiveness and efficiency with which a product or system can be successfully installed and/or uninstalled in a specified environment. Also, a production-ready SW or service is deployed as a workable system with the minimal user or system administrator interaction leveraging Infratructure as Code templates.",Installability,OSS,
152,DevOps-SW release and management,EOSC-SWRelMan-21,Preserve immutable infrastructures,"Any future change to a deployed Service is done in the form of a new deployment, in order to preserve immutable infrastructures.",Installability,OSS,
152,DevOps-SW release and management,EOSC-SWRelMan-22,Infrastructure as Code (IaC) validation,IaC is validated by specific (unit) testing frameworks for every change being done.,Installability,OSS,
154,DevOps-SW release and management,EOSC-SWRelMan-23,Packaging of tarballs,Tarballs are not included in the distribution directory. Packaged tarballs are not extracted in the distribution directory,Installability,"Individual, Team, OSS",
154,DevOps-SW release and management,EOSC-SWRelMan-24,Design for upgradability,Installation layout support different versions and code releases,Compatibility,"Team, OSS",
154,DevOps-SW release and management,EOSC-SWRelMan-25,Provide checksums,"Code releases provide checksums with each binaries (tarballs, RPMs, etc.).",Maintainability,OSS,
152,DevOps-SW release and management,EOSC-SWRelMan-26,Documentation version controlled,Documentation is version controlled.,Supportability,"Team, OSS",
151,DevOps-SW release and management,EOSC-SWRelMan-27,Documentation as code,Documentation is treated as code and resides in the same repository where the source code lies.,"Supportability, Maintainability, Reusability","Team, OSS",
151:154,DevOps-SW release and management,EOSC-SWRelMan-28,Documentation formats,"Documentation uses plain text format using a markup language, such as Markdown or reStructuredText. All software components delivered by the same project agree on a common markup language.","Supportability, Maintainability, Reusability","Team, OSS",
151:152,DevOps-SW release and management,EOSC-SWRelMan-29,Documentation online,Documentation is online available in a documentation repository. Documentation is rendered automatically.,"Supportability, Availability","Team, OSS",
151:152:154,DevOps-SW release and management,EOSC-SWRelMan-30,Documentation updates,Documentation is updated on new software or service versions involving any substantial or minimal change in the behavior of the application.,"Supportability, Maintainability, Reusability","Individual, Team, OSS",
151:152,DevOps-SW release and management,EOSC-SWRelMan-31,Documentation updates if inaccurate/unclear,Documentation is updated whenever reported as inaccurate or unclear.,"Supportability, Maintainability, Reusability","Team, OSS",
85:150:151:152:154,DevOps-SW release and management,EOSC-SWRelMan-32,Documentation production,"Documentation is produced according to the target audience, varying according to the software component specification. The identified types of documentation and their content are README file(one-paragraph description of the application, a ""Getting Started"" step-by-step description on how to get a development environment running, automated test execution how-to, links to external documentation below, contributing code of conduct, versioning specification, author list and contacts, license information and acknowledgements), Developer documentations (Private API documentation, structure and interfaces and build documentation), Deployment and Administration documentations (Installation and configuration guides, service reference card, FAQs and troubleshooting) and user documentations (Public API documentation and command-line reference).","Supportability, Maintainability, Reusability","Individual, Team, OSS",
152,DevOps-SW release and management,EOSC-SWRelMan-33,Documentation PID,Documentation has a Persistent Identifier (PID).,Supportability,"Team, OSS",
152,DevOps-SW release and management,EOSC-SWRelMan-34,Documentation license,Documentation has a non-software license.,Supportability,"Team, OSS",
151:154,DevOps - Testing,EOSC-SWTest-01,Code style,Each individual software complies with a de-facto code style standard for all the programming languages used in the codebase. Multiple standard style compliance is possible.,"Maintainability, Testability","Individual, Team, OSS",
85:93:146:150:151:154,DevOps - Testing,EOSC-SWTest-02,Unit tests,"Minimum acceptable code coverage threshold is 70\%. Unit testing coverage is higher for those sections of the code identified as critical by the developers, such as units part of a security module. Unit testing coverage may be lower for external libraries or pieces of code not maintained within the product's code base.","Maintainability, Testability","Team, OSS",
151:152,DevOps - Testing,EOSC-SWTest-03,Test doubles,"When working on automated testing,  Test Doubles (i.e., objects or procedures that look and behave like their release-intended 
counterparts, but are actually simplified versions that reduce the 
complexity and facilitate testing) are used to mimic a simplistic behavior of objects and procedures.","Functional suitability, Testability","Team, OSS",
ISO25010:88:92:151,DevOps - Testing,EOSC-SWTest-04,Test-Driven Development (TDD),"Software requirements are converted to test cases, and these test cases are checked automatically. Also, degree of effectiveness and efficiency with which test criteria can be established for a system, product or
component and tests can be performed to determine whether those criteria have been met.","Functional suitability, Maintainability, Testability",OSS,
152,DevOps - Testing,EOSC-SWTest-05,API testing,API testing MUST cover the validation of the features outlined in the specification (aka contract testing).,"Functional suitability, Testability","Team, OSS",Service
ISO25010:152,DevOps - Testing,EOSC-SWTest-06,Integration testing,"Whenever a new functionality is involved, integration testing guarantees the operation of any previously-working interaction with external Services","Functional suitability, Testability, Interoperability",OSS,
ISO25010:152,DevOps - Testing,EOSC-SWTest-07,Functional testing,"Functional testing covers the full scope -e.g. positive, negative, edge cases- for the set of functionality that the software or service claims to provide.","Functional suitability, Testability","Team, OSS",Service
ISO25010:152,DevOps - Testing,EOSC-SWTest-08,Performance testing,Performance testing is carried out to check the Software Application performance under varying loads.,"Functional suitability, Testability",OSS,
152,DevOps - Testing,EOSC-SWTest-09,Stress testing,Stress testing is carried out to check the Service to determine the behavioral limits under sudden increased load.,"Functional suitability, Testability",OSS,Service
152,DevOps - Testing,EOSC-SWTest-10,Scalability testing,Scalability testing is carried out to check the Service ability to scale up and/or scale out when its load reaches the limits.,"Functional suitability, Testability",OSS,Service
152,DevOps - Testing,EOSC-SWTest-11,Elasticity testing,"Elasticity testing is carried out to check the Service ability to scale out or scale in, depending on its demand or workload.","Functional suitability, Testability",OSS,Service
151,DevOps - Testing,EOSC-SWTest-12,Open Web Application Security Project (OWASP),Application is compliant with Open Web Application Security Project (OWASP) secure coding guidelines,Security,OSS,
151,DevOps - Testing,EOSC-SWTest-13,Static Application Security Testing (SAST),Source code uses automated linter tools to perform static application security testing (SAST) that flag common suspicious constructs that may cause a bug or lead to a security risk (e.g. inconsistent data structure sizes or unused resources).,Security,OSS,
140:150:151,DevOps - Testing,EOSC-SWTest-14,Security code reviews,Security code reviews for certain vulnerabilities is done as part of the identification of potential security flaws in the code. Inputs  come from automated linters and manual penetration testing results.,Security,OSS,
151,DevOps - Testing,EOSC-SWTest-15,No world-writable files or directories,World-writable files or directories are not be present in the product's configuration or logging locations.,Security,"Team, OSS",
152,DevOps - Testing,EOSC-SWTest-16,Public endpoints and APIs encrypted,The Service public endpoints and APIs are secured with data encryption.,Security,"Team, OSS",Service
152,DevOps - Testing,EOSC-SWTest-17,Strong ciphers,The Service uses strong ciphers for data encryption.,Security,"Team, OSS",Service
150:152,DevOps - Testing,EOSC-SWTest-18,Authentication and Authorisation,The Service has an authentication and authorization mechanism. The Service validates the credentials and signatures.,"Security, Technical accessibility","Team, OSS",Service
152,DevOps - Testing,EOSC-SWTest-19,API security assessment,API testing includes the assessment of the security-related criteria.,Security,OSS,Service
152,DevOps - Testing,EOSC-SWTest-20,Service compliance with data regulations (GDPR),"The Service handles personal data in compliance with the applicable regulations, such as the General Data Protection Regulation (GDPR) within the European boundaries.",Security,"Individual, Team, OSS",Service
152,DevOps - Testing,EOSC-SWTest-21,Dynamic Application Security Testing (DAST),"DAST checks are executed, through the use of ad-hoc tools, directly to an operational Service in order to uncover runtime security vulnerabilities and any other environment-related issues (e.g. SQL injection, cross-site scripting or DDOS). The latest release of OWASP's Web Security Testing Guide and the NIST's Technical Guide to Information Security Testing and Assessment are considered for carrying out comprehensive Service security testing.",Security,OSS,
152,DevOps - Testing,EOSC-SWTest-22,Interactive Application Security Testing (IAST),"Interactive Application Security Testing (IAST), analyzes code for security vulnerabilities while the app is run by an automated test. IAST is performed to a service in an operating state.",Security,OSS,Service
152,DevOps - Testing,EOSC-SWTest-23,Security penetration testing,Penetration testing (manual or automated) is part of the application security verification effort.,Security,OSS,
ISO25010:152,DevOps - Testing,EOSC-SWTest-24,Security assessment,"The security assessment of the target system configuration is particularly important to reduce the risk of security attacks. The benchmarks delivered by the Center for Internet Security (CIS) and the NIST's Security Assurance Requirements for Linux Application Container Deployments is considered for this task. Also, degree to which a product or system protects information and data so that persons or other products or
systems have the degree of data access appropriate to their types and levels of authorization.",Security,OSS,
152,DevOps - Testing,EOSC-SWTest-25,Security as Code (SaC) Testing,"IaC testing covers the security auditing of the IaC templates (SaC) in order to assure the deployment of secured Services. For all the third-party dependencies used in the IaC templates (including all kind of software artefacts, such as Linux packages or container-based images)",Security,OSS,
152,Service Operability,EOSC-SrvOps-01,Acceptable Usage Policy (AUP),"An Acceptable Usage Policy (AUP) is declared. AUP Is a set of rules applied by the owner, creator or administrator of a network, Service or system, that restrict the ways in which the network, Service or system may be used and sets guidelines as to how it should be used. The AUP can also be referred to as: Acceptable Use Policy or Fair Use Policy.",Supportability,OSS,
152,Service Operability,EOSC-SrvOps-02,Access Policy and Terms of Use,"An Access Policy or Terms of Use (APTU) is declared. APTU represents a binding legal contract between the users (and/or customers), and the Provider of the Service. The Access Policy mandates the users (and/or customers) access to and the use of the Provider's Service.",Supportability,OSS,
152,Service Operability,EOSC-SrvOps-03,Privacy policy,"A Privacy Policy is declared, with a data privacy statement informing the users (and/or customers), about which personal data is collected and processed when they use and interact with the Service. It states which rights the users (and/or customers) have regarding the processing of their data.",Supportability,OSS,
152,Service Operability,EOSC-SrvOps-04,Operational Level Agreement (OLA),The Service includes an Operational Level Agreement (OLA) with the infrastructure where it is integrated.,Supportability,OSS,Service
152,Service Operability,EOSC-SrvOps-05,Service Level Agreement (SLA),The Service includes Service Level Agreement (SLA) with user communities.,Supportability,OSS,Service
152,Service Operability,EOSC-SrvOps-06,Monitoring service public endpoints,"The Service public endpoints are monitored, such as probes measuring the http or https response time","Availability, Reliability",OSS,Service
152,Service Operability,EOSC-SrvOps-07,Monitoring service public APIs,The Service public APIs are monitored through the use of functional tests.,"Availability, Reliability",OSS,Service
152,Service Operability,EOSC-SrvOps-08,Monitoring service Web Interface,"The Service Web interface are monitored, this can be accoplished through the use of automated and periodic functional tests.","Availability, Reliability",OSS,Service
152,Service Operability,EOSC-SrvOps-09,Monitoring security public endpoints and APIs,The Service is monitored for public endpoints and APIs secured and strong ciphers for encryption.,"Availability, Reliability",OSS,Service
152,Service Operability,EOSC-SrvOps-10,Monitoring security DAST,The Service is monitored with DAST security checks.,"Availability, Reliability",OSS,Service
152,Service Operability,EOSC-SrvOps-11,Monitoring infrastructure,The Service is monitored for infrastructure-related criteria.,"Availability, Reliability",OSS,Service
152,Service Operability,EOSC-SrvOps-12,Monitoring with Unit tests,"IaC (unit) tests are reused as monitoring tests, thus avoiding duplication.","Availability, Reliability",OSS,