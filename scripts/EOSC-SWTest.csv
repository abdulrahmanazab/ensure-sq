Paper_ID,EOSC-TF_Codename,Codename,EOSC-TF_Name,Name,Definition,Characteristics
151,EOSC-SWTest-01,QC.Sty01,Code style,Code style,Each individual software product MUST comply with a de-facto code style standard for all the programming languages used in the codebase. Compliance with multiple standards MAY exist.,"Maintainability, Testability"
154,EOSC-SWTest-01,6.5,Code style,Sanity-check your code before release,"If you're writing C/C++ using GCC, test-compile with -Wall and clean up all warning messages before each release. Compile your code with every compiler you can find â€” different compilers often find different problems. Specifically, compile your software on true 64-bit machine. Underlying data types can change on 64-bit machines, and you will often find new problems there. Find a UNIX vendor's system and run the lint utility over your software. Run tools that for memory leaks and other run-time errors; Electric Fence and Valgrind are two good ones available in open source.For Python projects, the PyChecker program can be a useful check. It's not out of beta yet, but nevertheless often catches nontrivial errors. If you're writing Perl, check your code with perl -c (and maybe -T, if applicable). Use perl -w and 'use strict' religiously.","Maintainability, Testability"
151,EOSC-SWTest-01,QC.Sty02,Code style,Avoid custom code style guidelines,"Custom code style guidelines MUST be avoided, only considered in the hypothetical event of programming languages without existing community style standards. Custom styles MUST be documented by defining each convention and its expected output. Custom styles SHOULD evolve over time towards a more consistent definition.","Maintainability, Testability"
151,EOSC-SWTest-01,QC.Sty03,Code style,Allow exceptions,Exceptions of individual conventions from the main definition are allowed but SHOULD be avoided. Absence of standard conventions SHOULD be justified and tracked.,"Maintainability, Testability"
151,EOSC-SWTest-01,QC.Sty04,Code style,Automated code style compliance testing,Code style compliance testing MUST be automated and MUST be triggered for each candidate change in the source code.,"Maintainability, Testability"
151,EOSC-SWTest-02,QC.Uni01,Unit tests,Minimum acceptable code coverage,"Minimum acceptable code coverage threshold SHOULD be 70\%. Unit testing coverage SHOULD be higher for those sections of the code identified as critical by the developers, such as units part of a security module. Unit testing coverage MAY be lower for external libraries or pieces of code not maintained within the product's code base.","Maintainability, Testability"
151,EOSC-SWTest-02,QC.Uni02,Unit tests,Separation of main code and units,Units SHOULD reside in the repository code base but separated from the main code.,"Maintainability, Testability"
151,EOSC-SWTest-02,QC.Uni03,Unit tests,Unit testing coverage checks,Unit testing coverage MUST be checked on change basis.,"Maintainability, Testability"
151,EOSC-SWTest-02,QC.Uni04,Unit tests,Unit testing coverage automation,"Unit testing coverage MUST be automated. When working on automated testing, the use of testing doubles is RECOMMENDED to mimic a simplistic behavior of objects and procedures.","Maintainability, Testability"
85,EOSC-SWTest-02,-,Unit tests,Test coverage,Each method/function has a test to support it,"Maintainability, Testability"
93,EOSC-SWTest-02,SM2,Unit tests,Number of test cases SLOC*,Number of lines of source code containing test cases that check that the program is behaving as expected,"Maintainability, Testability"
93,EOSC-SWTest-02,SM3,Unit tests,Number of assertions / number of test cases,Ratio number of assertions / number of test cases,"Maintainability, Testability"
146,EOSC-SWTest-03,-,Testability,Testability,It facilitates the establishment of verification criteria and supports evaluation of its performance.,"Maintainability, Testability"
150,EOSC-SWTest-03,CA9,Testability,Verification and testing,Actual software application tested and validated through successful use of application output.,"Maintainability, Testability"
154,EOSC-SWTest-03,6.4,Testability,Test your code before release,A good test suite allows the team to buy inexpensive hardware for testing and then easily run regression tests before releases.,"Maintainability, Testability"
151,EOSC-SWTest-04,QC.Har01,Test doubles,Test doubles,"When working on automated testing, the use of Test Doubles is RECOMMENDED to mimic a simplistic behavior of objects and procedures.","Functional suitability, Testability"
151,EOSC-SWTest-04,QC.Har02,Test doubles,Test doubles in SW repository,Test Doubles SHOULD reside in the software component repository code base but separated from the main code.,"Functional suitability, Testability"
151,EOSC-SWTest-04,QC.Har03,Test doubles,Regression testing,"Regression testing, that checks the conformance with previous tests, SHOULD be covered at this stage by executing the complete set of Test Doubles available.","Functional suitability, Testability"
151,EOSC-SWTest-04,QC.Har04,Test doubles,Test doubles checked,"Test Doubles and regression, MUST be checked on change basis.","Functional suitability, Testability"
152,EOSC-SWTest-04,SvcQC.Api03,Test doubles,Use of test doubles,"API testing SHOULD involve the use of test doubles, such as mock servers or stubs, that act as a validation layer for the incoming requests.","Functional suitability, Testability"
151,EOSC-SWTest-05,QC.Tdd01,Test-Driven Development (TDD),Test-Driven Development (TDD),"Software requirements SHOULD be converted to test cases, and these test cases SHOULD be checked automatically.","Functional suitability, Maintainability, Functional suitability, Testability"
88,EOSC-SWTest-05,TDD,Test-Driven Development (TDD),Test-Driven Development (TDD),Define and code unit tests for each small bit of program functionality,"Functional suitability, Maintainability, Functional suitability, Testability"
152,EOSC-SWTest-06,SvcQC.Api01,API testing,Validation of features,API testing MUST cover the validation of the features outlined in the specification (aka contract testing).,"Functional suitability, Testability"
152,EOSC-SWTest-06,SvcQC.Api01.1,API testing,Compliant with OpenAPI Specification (OAS),Any change in the API not compliant with the OAS MUST NOT pass contract testing.,"Functional suitability, Testability"
152,EOSC-SWTest-06,SvcQC.Api01.2,API testing,Use of OAS,"The use of OAS SHOULD narrow down the applicable set of test cases to the features described in the specification, avoiding unnecessary assertions.","Functional suitability, Testability"
152,EOSC-SWTest-06,SvcQC.Fun01.1,API testing,"Functional testing, detect feature disruptions","When using APIs, contract testing MUST detect any disruption in the features exposed by the provider to the consumer, through the validation of the API specification.","Functional suitability, Testability"
152,EOSC-SWTest-07,SvcQC.Int01,Integration testing,Integration testing,"Whenever a new functionality is involved, integration testing MUST guarantee the operation of any previously-working interaction with external Services","Functional suitability, Testability"
152,EOSC-SWTest-07,SvcQC.Int02,Integration testing,"Integration testing, avoid non operational services",Integration testing MUST NOT rely on non-operational or out-of-the-warranty services.,"Functional suitability, Testability"
152,EOSC-SWTest-07,SvcQC.Int03,Integration testing,Integration testing use pilot/Testbeds,Ad-hoc pilot Service infrastructures and/or local testbeds MAY be used to cope with the integration testing requirements.,"Functional suitability, Testability"
152,EOSC-SWTest-07,SvcQC.Int04,Integration testing,Integration testing automation,Integration testing SHOULD be automated.,"Functional suitability, Testability"
152,EOSC-SWTest-08,SvcQC.Fun01,Functional testing,"Functional testing, full scope","Functional testing SHOULD tend to cover the full scope -e.g. positive, negative, edge cases- for the set of functionality that the Service claims to provide.","Functional suitability, Testability"
152,EOSC-SWTest-08,SvcQC.Fun01.2,Functional testing,"Functional testing, Web interface",Functional tests SHOULD include the Web interface of the Service.,"Functional suitability, Testability"
152,EOSC-SWTest-08,SvcQC.Fun02,Functional testing,"Functional testing, Automation",Functional tests SHOULD be checked automatically.,"Functional suitability, Testability"
152,EOSC-SWTest-08,SvcQC.Fun03,Functional testing,"Functional testing, Tests provided by developers",Functional tests SHOULD be provided by the developers of the underlying software.,"Functional suitability, Testability"
152,EOSC-SWTest-09,SvcQC.Per01,Performance testing,Performance testing,Performance testing SHOULD be carried out to check the Service performance under varying loads.,"Functional suitability, Testability"
152,EOSC-SWTest-10,SvcQC.Per02,Stress testing,Stress testing,Stress testing SHOULD be carried out to check the Service to determine the behavioral limits under sudden increased load.,"Functional suitability, Testability"
152,EOSC-SWTest-11,SvcQC.Per03,Scalability testing,Scalability testing,Scalability testing MAY be carried out to check the Service ability to scale up and/or scale out when its load reaches the limits.,"Functional suitability, Testability"
152,EOSC-SWTest-12,SvcQC.Per04,Elasticity testing,Elasticity testing,"Elasticity testing MAY be carried out to check the Service ability to scale out or scale in, depending on its demand or workload.","Functional suitability, Testability"
151,EOSC-SWTest-13,QC.Sec01,Open Web Application Security Project (OWASP),OWASP Compliance,"Compliance with Open Web Application Security Project (OWASP) secure coding guidelines is RECOMMENDED, even for non-web applications.",Security
151,EOSC-SWTest-14,QC.Sec02,Static Application Security Testing (SAST),Static Application Security Testing (SAST),Source code SHALL use automated linter tools to perform static application security testing (SAST) that flag common suspicious constructs that may cause a bug or lead to a security risk (e.g. inconsistent data structure sizes or unused resources).,Security
151,EOSC-SWTest-15,QC.Sec03,Security code reviews,Security code reviews,Security code reviews for certain vulnerabilities SHOULD be done as part of the identification of potential security flaws in the code. Inputs SHOULD come from automated linters and manual penetration testing results.,Security
140,EOSC-SWTest-15,8.3,Security code reviews,Security,"This may be measured as the resource cost expended to solve problems caused by unauthorized activity. This resource cost may appear in a number of ways, e.g. staff time to recover system (time) or loss of information (bytes or value).",Security
150,EOSC-SWTest-15,CA10,Security code reviews,Security,Security was addressed in the development phases up to and including product release.,Security
151,EOSC-SWTest-16,QC.Sec04,No world-writable files or directories,No world-writable files or directories,World-writable files or directories MUST NOT be present in the product's configuration or logging locations.,Security
152,EOSC-SWTest-17,SvcQC.Sec01,Public endpoints and APIs encrypted,Public endpoints and APIs encrypted,The Service public endpoints and APIs MUST be secured with data encryption.,Security
152,EOSC-SWTest-18,SvcQC.Sec01.1,Strong ciphers,Strong ciphers,The Service MUST use strong ciphers for data encryption.,Security
152,EOSC-SWTest-19,SvcQC.Sec02,Authentication and Authorisation,Service authentication,The Service SHOULD have an authentication mechanism.,"Security, Technical accessibility"
150,EOSC-SWTest-19,CA12,Authentication and Authorisation,Authentication and Authorisation,"Full rights management by users, sharing/delegation of permissions/access to individual data from within the system.","Security, Technical accessibility"
152,EOSC-SWTest-19,SvcQC.Sec02.1,Authentication and Authorisation,Service composition centralized authentication,"Whenever dealing with a Service Composition, such as microservice architectures, the Services SHOULD be managed by a centralized authentication mechanism.","Security, Technical accessibility"
152,EOSC-SWTest-19,SvcQC.Sec02.2,Authentication and Authorisation,Protect the backend services API gateway,"In publicly-accessible APIs, Service authentication SHOULD be handled through an API gateway in order to control the traffic and protect the backend services from overuse.","Security, Technical accessibility"
152,EOSC-SWTest-19,SvcQC.Sec03,Authentication and Authorisation,Service composition centralized authorization,The Service SHOULD implement an authorization mechanism.,"Security, Technical accessibility"
152,EOSC-SWTest-19,SvcQC.Sec03.1,Authentication and Authorisation,Service composition authorization access permissions,"In Service Composition environments, the authorization mechanism SHOULD uniquely grant the essential access permissions for each Service according to the principle of least privilege (PoLP).","Security, Technical accessibility"
152,EOSC-SWTest-19,SvcQC.Sec04,Authentication and Authorisation,Service Credential and Signatures validation,The Service MUST validate the credentials and signatures.,"Security, Technical accessibility"
152,EOSC-SWTest-19,SvcQC.Sec04.1,Authentication and Authorisation,Service credential and certification trusted authority,Credentials used in the Service MUST be signed by a recognized and trusted certification authority.,"Security, Technical accessibility"
152,EOSC-SWTest-20,SvcQC.Api02,API security assessment,API security assessment,API testing MUST include the assessment of the security-related criteria.,Security
152,EOSC-SWTest-21,SvcQC.Sec05,Service compliance with data regulations (GDPR),Service compliance with data regulations (GDPR),"The Service MUST handle personal data in compliance with the applicable regulations, such as the General Data Protection Regulation (GDPR) within the European boundaries.",Security
152,EOSC-SWTest-22,SvcQC.Sec06.1,Dynamic Application Security Testing (DAST),Dynamic Application Security Testing (DAST),"DAST checks MUST be executed, through the use of ad-hoc tools, directly to an operational Service in order to uncover runtime security vulnerabilities and any other environment-related issues (e.g. SQL injection, cross-site scripting or DDOS). The latest release of OWASP's Web Security Testing Guide and the NIST's Technical Guide to Information Security Testing and Assessment MUST be considered for carrying out comprehensive Service security testing.",Security
152,EOSC-SWTest-23,SvcQC.Sec06.2,Interactive Application Security Testing (IAST),Interactive Application Security Testing (IAST),"Interactive Application Security Testing (IAST), analyzes code for security vulnerabilities while the app is run by an automated test. IAST **SHOULD** be performed to a service in an operating state.",Security
152,EOSC-SWTest-24,SvcQC.Sec06.3,Security penetration testing,Security penetration testing,Penetration testing (manual or automated) MAY be part of the application security verification effort.,Security
152,EOSC-SWTest-25,SvcQC.Sec06.4,Security assessment,Security assessment,The security assessment of the target system configuration is particularly important to reduce the risk of security attacks. The benchmarks delivered by the Center for Internet Security (CIS) and the NIST's Security Assurance Requirements for Linux Application Container Deployments MUST be considered for this task.,Security
152,EOSC-SWTest-26,SvcQC.Sec07,Security as Code (SaC) Testing,Security as Code (SaC) Testing,"IaC testing MUST cover the security auditing of the IaC templates (SaC) in order to assure the deployment of secured Services. For all the third-party dependencies used in the IaC templates (including all kind of software artefacts, such as Linux packages or container-based images):",Security
152,EOSC-SWTest-26,SvcQC.Sec07.1,Security as Code (SaC) Testing,SaC Vulnerability scanning,SaC MUST perform vulnerability scanning of the artefact versions in use.,Security
152,EOSC-SWTest-26,SvcQC.Sec07.2,Security as Code (SaC) Testing,SaC Trust and Signature,SaC SHOULD verify that the artefacts are trusted and digitally signed.,Security
152,EOSC-SWTest-26,SvcQC.Sec07.3,Security as Code (SaC) Testing,SaC Security policy scans,"SaC MUST scan IaC templates to uncover misalignments with widely-accepted security policies, such as non-encrypted secrets or disabled audit logs.",Security
152,EOSC-SWTest-26,SvcQC.Sec07.4,Security as Code (SaC) Testing,SaC Security requirement violations,"SaC MAY be used to seek, in the IaC templates, for violations of security requirements outlined in the applicable regulations.",Security