Paper_ID,EOSC-TF_Codename,Codename,EOSC-TF_Name,Name,Definition,Characteristics
11,EOSC-SCMet-01,-,Rebuild value,Estimated rebuild value,Estimated rebuild value: Evaluate the volume property,Maintainability
11,EOSC-SCMet-02,-,\% of redundant code,Percentage of Redundant code,Percentage of Redundant code: Evaluate the duplication property,"Maintainability, Modifiability"
11,EOSC-SCMet-03,-,Source Lines Of Code,Lines of code per unit,"The number of lines of code in each unit, evaluating the unit size property",Maintainability
45,EOSC-SCMet-03,NumLines,Source Lines Of Code,Number of lines,Number of lines for the whole software or components/modules/classes/functions/methods,Maintainability
93,EOSC-SCMet-04,SM1,\% Assertions,Percentage of assertions SLOC,Percentage of lines of source code containing assertions,Maintainability
11,EOSC-SCMet-05,-,Cyclomatic Complexity,Cyclomatic Complexity per unit (McCabe),Cyclomatic Complexity per unit (McCabe): Evaluate the unit complexity property,Maintainability
45,EOSC-SCMet-05,CyComSC,Cyclomatic Complexity,Complexity of the source code,Cyclomatic complexity or the whole software or modules/components/classes/functions/methods. Number of linearly independent paths through a program's source code. Source \url{https://docs.microsoft.com/en-us/visualstudio/code-quality/code-metrics-values?view=vs-2022}: Measures the structural complexity of the code. It is created by calculating the number of different code paths in the flow of the program. A program that has complex control flow requires more tests to achieve good code coverage and is less maintainable.,Maintainability
93,EOSC-SCMet-06,SM5,Cyclomatic Complexity test/source ratio,Cyclomatic Complexity test/source ratio,Ratio between the sum of cyclomatic complexities of all tests and the whole source code,Maintainability
11,EOSC-SCMet-07,-,Number of arguments,Number of parameters per unit,Number of parameters declared in the interface of each unit,Maintainability
128,EOSC-SCMet-07,-,Number of arguments,Number of arguments,Number of arguments in the functions,Maintainability
11,EOSC-SCMet-08,-,Number of function calls,Number of incoming calls per module,"Number of incoming invocations for each module, evaluating the module coupling property",Maintainability
45,EOSC-SCMet-08,Cop,Number of function calls,Coupling,"Source \url{https://docs.microsoft.com/en-us/visualstudio/code-quality/code-metrics-values?view=vs-2022}: Measures the coupling to unique classes through parameters, local variables, return types, method calls, generic or template instantiations, base classes, interface implementations, fields defined on external types, and attribute decoration. Good software design dictates that types and methods should have high cohesion and low coupling. High coupling indicates a design that is difficult to reuse and maintain because of its many interdependencies on other types. Source \url{https://en.wikipedia.org/wiki/Coupling_(computer_programming)}: Coupling refers to the interdependencies between modules",Maintainability
128,EOSC-SCMet-08,-,Number of function calls,Number of Steps,Number of function calls,Maintainability
45,EOSC-SCMet-09,BSize,Binary size,Binary size,Binary size,Maintainability
45,EOSC-SCMet-10,NumMod,Number of modules,Number of modules,Number of modules/components/classes,"Maintainability, Functional suitability"
85,EOSC-SCMet-10,-,Number of modules,Code modularity,The code of the project is fragmented in smaller modules that make it easier to contribute to,"Maintainability, Functional suitability"
128,EOSC-SCMet-10,-,Number of modules,Number of modules,Number of software components the complete source has,"Maintainability, Functional suitability"
150,EOSC-SCMet-10,CA4,Number of modules,Modularity,"It is evident that all functions and data are encapsulated into objects or accessible through web service interfaces. There is consistent error handling with meaningful messages and advice, and use of generic extensions to program languages for stronger type checking and compilation-time error checking. Services are available externally and code within each module contains few independent logical paths.","Maintainability, Functional suitability"
45,EOSC-SCMet-11,NumComLines,Number of comments,Number of comments,Number of lines corresponding to comments for the whole software or per modules/components/classes/functions/methods,Modifiability
128,EOSC-SCMet-11,-,Number of comments,Number of comments,Number of comments in the source code,Modifiability
45,EOSC-SCMet-12,MI,Maintainability Index (MI),"Maintainability Index (MI) for the whole, for a module/component, for the architecture","Maintainability Index (MI) for the whole, for a module/component, for the architecture: Source \url{https://docs.microsoft.com/en-us/visualstudio/code-quality/code-metrics-values?view=vs-2022}: Calculates an index value between 0 and 100 that represents the relative ease of maintaining the code. A high value means better maintainability. Color coded ratings can be used to quickly identify trouble spots in your code. A green rating is between 20 and 100 and indicates that the code has good maintainability. A yellow rating is between 10 and 19 and indicates that the code is moderately maintainable. A red rating is a rating between 0 and 9 and indicates low maintainability",Maintainability
45,EOSC-SCMet-13,Coh,Internal cohesion,Internal cohesion,Source \url{https://en.wikipedia.org/wiki/Coupling_(computer_programming)}: Cohesion describes how related the functions within a single module are. Low cohesion implies that a given module performs tasks which are not very related to each other and hence can create problems as the module becomes large,Maintainability
93,EOSC-SCMet-14,SM4,Class size and the prediction efficiency,Control measure to counter the confounding effect of class size on the prediction efficiency,Control measure to counter the confounding effect of class size on the prediction efficiency: (TLOC+/SLOC*) / (number of test classes / number of source classes),Reliability
93,EOSC-SCMet-15,SM6,Coupling Between Objects (CBO) ratio,Coupling Between Objects (CBO) ratio,Ratio between the CBO in the tests and the whole source code,Maintainability
93,EOSC-SCMet-16,SM7,Depth of inheritance Tree (DIT) ratio,Depth of inheritance Tree (DIT) ratio,Ratio between the DIT of the tests and the DIT of the whole source code,Maintainability
93,EOSC-SCMet-17,SM8,Weighted Methods per Class (WMC) ratio,Weighted Methods per Class (WMC) ratio,Ratio between the WMC of the tests with respect of the WMC of the whole source code,Maintainability
93,EOSC-SCMet-18,SM9,SLOC ratio,SLOC ratio,SLOC* of the whole project with respect to the minimum SLOC* of its components,Maintainability
128,EOSC-SCMet-19,-,Number of include files,Number of include files,Number of imported modules,Maintainability
128,EOSC-SCMet-20,-,Number of conditions,Number of conditions,Number of condition checks to perform an operation,Maintainability
128,EOSC-SCMet-21,-,Number of loops,Number of loops,Number of loops in the program,Maintainability