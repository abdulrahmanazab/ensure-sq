Paper_ID,EOSC-TF_Codename,Codename,EOSC-TF_Name,Name,Definition,Characteristics,
151,EOSC-SWRelMan-01,QC.Acc01,Open source ,Open source and publicly available,"Following the open-source model, the source code being produced MUST be open and publicly available to promote the adoption and augment the visibility of the software developments.","Supportability, Maintainability, Availability",
154,EOSC-SWRelMan-01,6.2,Open source ,Don't rely on proprietary code,"Don't rely on proprietary languages, libraries, or other code","Supportability, Maintainability, Availability",
151,EOSC-SWRelMan-02,QC.Acc02,Version Control System (VCS),Version Control System (VCS),Source code MUST use a Version Control System (VCS).It is RECOMMENDED that all software components delivered by the same project agree on a common VCS.,"Supportability, Maintainability",
151,EOSC-SWRelMan-03,QC.Acc03,Source code hosting,Source code hosting,Source code produced within the scope of a broader development project SHOULD reside in a common organization of a version control repository hosting service.,"Supportability, Maintainability",
151,EOSC-SWRelMan-04,QC.Wor01,Working state version,Working state version,"The main branch in the source code repository MUST maintain a working state version of the software component. Main branch SHOULD be protected to disallow force pushing, thus preventing untested and un-reviewed source code from entering the production-ready version. New features SHOULD only be merged in the main branch whenever the SQA criteria is fulfilled.",Maintainability,
151,EOSC-SWRelMan-05,QC.Wor02,Changes branches,Changes branches,"New changes in the source code MUST be placed in individual branches. It is RECOMMENDED to agree on a branch nomenclature, usually by prefixing, to differentiate change types (e.g. feature, release, fix).",Maintainability,
151,EOSC-SWRelMan-06,QC.Wor03,Good patching practice,Secondary long-term branch,"The existence of a secondary long-term branch that contains the changes for the next release is RECOMMENDED. Next release changes come from the individual branches. Once ready for release, changes in the secondary long-term branch are merged into the main branch and versioned. At that point in time, main and secondary branches are aligned. This step SHOULD mark a production release.",Maintainability,
154,EOSC-SWRelMan-06,2,Good patching practice,Good patching practice,Open-source software by writing patches,Maintainability,
151,EOSC-SWRelMan-07,QC.Man01,Support,Issue tracker,"An issue tracking system facilitates structured software development. Leveraging issues to track down both new enhancements and defects (bugs, documentation typos) is RECOMMENDED.","Maintainability, Operability",
150,EOSC-SWRelMan-07,CA8,Support,Support,"The support by the organisation(s) is clearly defined with frequent and timely updates, releases, etc., responding to the needs of the user communities, as well as consolidation of changes by the community. There is a staffed telephone/email helpdesk available as well as a maintained website. Discussion groups are active and include regular input from the developer(s) and developer organisation(s). There is evidence that continuity of support is implied. Support may be free or fee-based via a support Service Level Agreement (SLA) with the developer(s) or a third party.","Maintainability, Operability",
151,EOSC-SWRelMan-08,QC.Man02,Code review,Pull or merge requests,"In social coding environments, pull or merge requests represent the cornerstone of collaboration. A pull or merge request provides a place for review and discussion of the changes proposed to be part of an existing version of the code.",Maintainability,
151,EOSC-SWRelMan-08,QC.Rev01,Code review,Code review functionality,"Code reviews MUST be done in the agreed peer review tool within the project, with the following RECOMMENDED functionality: (a) Allows general and specific comments on the line or lines that need to be reviewed. (b) Shows the results of the required change-based test executions. (c) Allows to prevent merges of the candidate change whenever not all the required tests are successful. Exceptions to this rule cover the third-party or upstream contributions which MAY use the existing mechanisms or tools for code review provided by the target software project. This exception MUST only be allowed whenever the external revision lifecycle does not interfere with the project deadlines.",Maintainability,
85,EOSC-SWRelMan-08,-,Code review,Code goes through code reviews/peer review,Each contribution is assessed by a contributor different from the author,Maintainability,
92,EOSC-SWRelMan-08,-,Code review,Team work,"Pair programming, code review",Maintainability,
151,EOSC-SWRelMan-08,QC.Rev02,Code review,Code review open and collaborative,"Code reviews MUST be open and collaborative, allowing external expert revisions.",Maintainability,
151,EOSC-SWRelMan-08,QC.Rev03,Code review,Code review lightweight and Informal,"Code reviews SHOULD be lightweight and informal, meaning that some of the areas the reviewers MAY focus are: (a) Message description: commit message is clear, self-explanatory and describes precisely the objectives being addressed. (b) Goal or scope: change is needed and/or addresses/fixes the whole set of objectives. (c) Code analysis: useless statements in the code, library or modules imported but never used or code style suggestions. (d) Review of required tests: current battery of tests is sufficient for validation. (e) Review of documentation: whether the change SHOULD bring along a corresponding update in the documentation.",Maintainability,
151,EOSC-SWRelMan-08,QC.Rev04,Code review,Code review checks on change basis,Code reviews MUST be checked on change basis.,Maintainability,
151,EOSC-SWRelMan-08,QC.Rev05,Code review,Code reviews on security risk assessments,"Code reviews SHOULD assess the inherent security risk of the changes, ensuring that the security model has not been downgraded or compromised by the changes.",Maintainability,
151,EOSC-SWRelMan-09,QC.Ver01,Semantic Versioning ,Semantic Versioning specification,Semantic Versioning specification is RECOMMENDED for tagging the production releases.,Maintainability,
154,EOSC-SWRelMan-09,3.1,Semantic Versioning ,Use GNU-style names with a stem and major.minor.patch numbering,"All-lower-case alphanumeric stem prefix, followed by a dash, followed by a version number, extension, and other suffixes.",Maintainability,
151,EOSC-SWRelMan-10,QC.Lic01,Open-source license,Open-source license,"As open-source software, source code MUST adhere to an open-source license to be freely used, modified and distributed by others. Non-licensed software is exclusive copyright by default.","Supportability, Maintainability",
154,EOSC-SWRelMan-10,4,Open-source license,Good licensing and copyright practice: the theory,The license you choose defines the social contract you wish to set up among your co-developers and users.,"Supportability, Maintainability",
154,EOSC-SWRelMan-10,5,Open-source license,Good licensing and copyright practice: the practice,Good licensing and copyright practice: the practice,"Supportability, Maintainability",
151,EOSC-SWRelMan-10,QC.Lic01.1,Open-source license,Presence of licenses,Licenses MUST be physically present (e.g. as a LICENSE file) in the root of all the source code repositories related to the software component.,"Supportability, Maintainability",
151,EOSC-SWRelMan-10,QC.Lic02,Open-source license,Open source definition,License MUST be compliant with the Open Source Definition. RECOMMENDED licenses are listed in the Open Source Initiative portal under the Popular Licenses category.,"Supportability, Maintainability",
151,EOSC-SWRelMan-11,QC.Met01,Metadata,Metadata file exists,"A metadata le SHOULD exist along side the code, under its VCS. The metadata file SHOULD be updated when needed, as is the case of a new version.","Supportability, Maintainability, Availability",
151,EOSC-SWRelMan-12,QC.Del01,Packaging,Automated delivery,Production-ready code MUST be built as an artifact that can be efficiently executed on a system.,Installability,
150,EOSC-SWRelMan-12,CA5,Packaging,Packaging,A Continuous Integration server job (or equivalent) is available to deploy the packaged/containerised software.Administrators are notified if deployment fails. Versions of deployed software can be upgraded/rolled back from a Continuous Integration server job (or equivalent). Data and/or index files can be restored from a Continuous Integration server job (or equivalent).,Installability,
154,EOSC-SWRelMan-12,6.3,Packaging,Build systems,A significant advantage of open source distributions is they allow each source package to adapt at compile-time to the environment it finds.,Installability,
151,EOSC-SWRelMan-13,QC.Del02,Register/publish artifact,Register/publish artifact,The built artifact MUST be uploaded and registered into a public repository of such artifacts.,Installability,
151,EOSC-SWRelMan-14,QC.Del03,Notification upon registration,Notification upon registration,"Upon success of the package delivery process, a notification MUST be sent to pre-defined parties such as the main developer or team.",Installability,
151,EOSC-SWRelMan-15,QC.Dep01,Code deployment,Code deployment,Production-ready code MUST be deployed as a workable system with the minimal user or system administrator interaction leveraging software configuration management (SCM) tools.,Installability,
151,EOSC-SWRelMan-16,QC.Dep02,Software Configuration Management (SCM) as code,Software Configuration Management (SCM) module as code,"A software configuration management (SCM) module is treated as code. Version controlled, it SHOULD reside in a different repository than the source code to facilitate the distribution.",Installability,
151,EOSC-SWRelMan-17,QC.Dep03,SCM tool,SCM tool,"It is RECOMMENDED that all software components delivered by the same project agree on a common SCM tool. However, software products are not restricted to provide a unique solution for the automated deployment.",Installability,
151,EOSC-SWRelMan-18,QC.Dep04,SCM code changes,SCM code changes,Any change affecting the applications deployment or operation MUST be subsequently reflected in the relevant SCM modules.,Installability,
151,EOSC-SWRelMan-19,QC.Dep05,SCM official repositories,SCM official repositories,"Official repositories provided by the manufacturer SHOULD be used to host the SCM modules, thus augmenting the visibility and promote external collaboration.",Installability,
152,EOSC-SWRelMan-20,SvcQC.Dep01,Deployment production-ready service,Deployment production-ready service,A production-ready Service SHOULD be deployed as a workable system with the minimal user or system administrator interaction leveraging IaC templates.,Installability,
152,EOSC-SWRelMan-21,SvcQC.Dep02,Preserve immutable infrastructures,Preserve immutable infrastructures,"Any future change to a deployed Service SHOULD be done in the form of a new deployment, in order to preserve immutable infrastructures.",Installability,
152,EOSC-SWRelMan-22,SvcQC.Dep03,Infrastructure as Code (IaC) validation,Infrastructure as Code (IaC) validation on changes,IaC SHOULD be validated by specific (unit) testing frameworks for every change being done.,Installability,
154,EOSC-SWRelMan-24,7.1,Packaging of tarballs,Packaging of tarballs,"The single most annoying mistake newbie developers make is to build tarballs that unpack the files and directories in the distribution into the current directory, potentially stepping on files already located there. Never do this!",Installability,
154,EOSC-SWRelMan-25,7.4,Design for upgradability,Design for upgradability,"Your software will change over time as you put out new releases. Some of these changes will not be backward-compatible. Accordingly, you should give serious thought to designing your installation layouts so that multiple installed versions of your code can coexist on the same system. This is especially important for libraries — you can't count on all your client programs to upgrade in lockstep with your API changes",Compatibility,
154,EOSC-SWRelMan-26,7.5,Provide checksums,Provide checksums,"Provide checksums with your binaries (tarballs, RPMs, etc.).",Maintainability,
152,EOSC-SWRelMan-27,SvcQC.Doc03,Documentation version controlled,Documentation version controlled,Documentation MUST be version controlled.,Supportability,"All attributes on documentation needs reviewing, if it should be in a separate category?"
151,EOSC-SWRelMan-28,QC.Doc01,Documentation as code,Documentation as code,"Documentation MUST be treated as code. Version controlled, it MAY reside in the same repository where the source code lies.","Supportability, Maintainability, Reusability",
151,EOSC-SWRelMan-29,QC.Doc02,Documentation formats,Plain text using markup language,"Documentation MUST use plain text format using a markup language, such as Markdown or reStructuredText. It is RECOMMENDED that all software components delivered by the same project agree on a common markup language.","Supportability, Maintainability, Reusability",
154,EOSC-SWRelMan-29,8.1,Documentation formats,Documentation formats,"Here are the documentation markup formats now in widespread use among open-source developers. man pages, HTML Texinfo DocBook asciidoc","Supportability, Maintainability, Reusability",
154,EOSC-SWRelMan-29,8.2,Documentation formats,Good practice recommendations,Maintain your document masters in either XML-DocBook or asciidoc. Ship the XML or asciidoc masters. Generate XHTML from your masters,"Supportability, Maintainability, Reusability",
151,EOSC-SWRelMan-30,QC.Doc03,Documentation online,Available online,Documentation MUST be online available in a documentation repository. Documentation SHOULD be rendered automatically.,"Supportability, Availability",
152,EOSC-SWRelMan-30,SvcQC.Doc01,Documentation online,Documentation online,"Documentation MUST be available online, easily findable and accessible.","Supportability, Availability",
151,EOSC-SWRelMan-31,QC.Doc04,Documentation updates,Documentation updates with new software versions,Documentation MUST be updated on new software versions involving any substantial or minimal change in the behavior of the application.,"Supportability, Maintainability, Reusability",
152,EOSC-SWRelMan-31,SvcQC.Doc04,Documentation updates,Documentation updates,"Documentation MUST be updated on new Service versions involving any change in the installation, configuration or behaviour of the Service.","Supportability, Maintainability, Reusability",
154,EOSC-SWRelMan-31,6.6,Documentation updates,Sanity-check your documentation and READMEs before release,"Spell-check your documentation, README files and error messages in your software.","Supportability, Maintainability, Reusability",
151,EOSC-SWRelMan-32,QC.Doc05,Documentation updates if inaccurate/unclear,Documentation updates if inaccurate/unclear,Documentation MUST be updated whenever reported as inaccurate or unclear.,"Supportability, Maintainability, Reusability",
152,EOSC-SWRelMan-32,SvcQC.Doc05,Documentation updates if inaccurate/unclear,Documentation Inaccuracy and unclear,Documentation MUST be updated whenever reported as inaccurate or unclear.,"Supportability, Maintainability, Reusability",
85,EOSC-SWRelMan-33,-,Documentation production,Code documentation,The code is documented,"Supportability, Maintainability, Reusability",
85,EOSC-SWRelMan-33,-,Documentation production,Tutorials,Availability of material explaining how to use the target software through examples,"Supportability, Maintainability, Reusability",
150,EOSC-SWRelMan-33,CA1.1,Documentation production,End-user Documentation,User materials and tutorials can be used as training resources. There is detailed in software contextual user support documentation. Documentation is consistent with current version of the software. User created documentation and comments form part of the documentation available.,"Supportability, Maintainability, Reusability",
150,EOSC-SWRelMan-33,CA1.2,Documentation production,Operational Documentation,"Documentation is appropriate for different categories of deployment and management of the software. Deployment and configuration demonstrations, materials and tutorials can be used to teach other users. Documentation is consistent with current version of the software. User created documentation and comments form part of the documentation available.","Supportability, Maintainability, Reusability",
150,EOSC-SWRelMan-33,CA1.3,Documentation production,Development Documentation,"All stages of the software development lifecycle are fully documented, including design, testing and future improvement planning. Documentation is appropriate for different categories of users. Documentation describes the current version of the software. User created documentation and comments form part of the documentation available.","Supportability, Maintainability, Reusability",
151,EOSC-SWRelMan-33,QC.Doc06,Documentation production,Documentation production,"Documentation MUST be produced according to the target audience, varying according to the software component specification. The identified types of documentation and their RECOMMENDED content are README file(one-paragraph description of the application, a ""Getting Started"" step-by-step description on how to get a development environment running, automated test execution how-to, links to external documentation below, contributing code of conduct, versioning specification, author list and contacts, license information and acknowledgements), Developer documentations (Private API documentation, structure and interfaces and build documentation), Deployment and Administration documentations (Installation and configuration guides, service reference card, FAQs and troubleshooting) and user documentations (Public API documentation and command-line reference).","Supportability, Maintainability, Reusability",
152,EOSC-SWRelMan-33,SvcQC.Doc07,Documentation production,Documentation Target Audience,"Documentation MUST be produced according to the target audience, varying according to the Service specification.","Supportability, Maintainability, Reusability",
152,EOSC-SWRelMan-33,SvcQC.Doc07.1,Documentation production,Documentation Deployment and Administration,"The identified types of documentation and their RECOMMENDED content are Installation and configuration guides, and Service Reference Card with the following RECOMMENDED content: Brief functional description, List of proceses and daemons, init scripts and options, List of configuration files, locatin and example or template, Log files location and other useful audit information, List of ports, Service state informatio, List of cron jobs, Security information, FAQs and troubleshooting.","Supportability, Maintainability, Reusability",
152,EOSC-SWRelMan-33,SvcQC.Doc07.2,Documentation production,Documentation User,Detailed User Guide for the Serice. Public API documentation (if applicable). Command-line (CLI) reference (if applicable),"Supportability, Maintainability, Reusability",
154,EOSC-SWRelMan-33,7.2,Documentation production,Have a README,Have a file called README or READ.ME that is a roadmap of your source distribution,"Supportability, Maintainability, Reusability",
154,EOSC-SWRelMan-33,8,Documentation production,Good documentation practice,The most important good documentation practice is to actually write some,"Supportability, Maintainability, Reusability",
154,EOSC-SWRelMan-33,7.3,Documentation production,Respect and follow standard file naming practices,standard top-level file names: README INSTALL AUTHORS NEWS HISTORY COPYING LICENSE MANIFEST FAQ TAGS,"Supportability, Maintainability, Reusability",
152,EOSC-SWRelMan-34,SvcQC.Doc02,Documentation PID,Documentation PID,Documentation SHOULD have a Persistent Identifier (PID).,Supportability,
152,EOSC-SWRelMan-35,SvcQC.Doc06,Documentation license,Documentation license,Documentation MUST have a non-software license.,Supportability,